!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Add for WorldUnit	src/types.rs	/^impl Add for WorldUnit {$/;"	i
App	src/gui/app.rs	/^impl App {$/;"	i
App	src/gui/app.rs	/^pub struct App {$/;"	s
AsRef for App	src/gui/app.rs	/^impl AsRef<Window> for App {$/;"	i
AsRef for Content	src/gui/app.rs	/^impl AsRef<Box> for Content {$/;"	i
AsRef for DialogRenderer	src/renderer/dialog/mod.rs	/^impl AsRef<DrawingArea> for DialogRenderer {$/;"	i
BoxModel	src/manager/components/mod.rs	/^pub enum BoxModel {$/;"	g
ComponentID	src/manager/mod.rs	/^pub struct ComponentID(usize, Arc<Mutex<ModelManager>>);$/;"	s
Content	src/gui/app.rs	/^impl Content {$/;"	i
Content	src/gui/app.rs	/^pub struct Content {$/;"	s
DecisionBox	src/manager/components/decision_box.rs	/^pub struct DecisionBox {$/;"	s
DialogBox	src/manager/components/dialog_box.rs	/^impl DialogBox {$/;"	i
DialogBox	src/manager/components/dialog_box.rs	/^pub struct DialogBox {$/;"	s
DialogInputManager	src/input/dialog.rs	/^impl DialogInputManager {$/;"	i
DialogInputManager	src/input/dialog.rs	/^pub struct DialogInputManager {$/;"	s
DialogInputManagerState	src/input/dialog.rs	/^pub enum DialogInputManagerState {$/;"	g
DialogRenderer	src/renderer/dialog/mod.rs	/^impl DialogRenderer {$/;"	i
DialogRenderer	src/renderer/dialog/mod.rs	/^pub struct DialogRenderer {$/;"	s
DialogRendererMessage	src/event/message/renderer.rs	/^pub enum DialogRendererMessage {$/;"	g
Drawable	src/manager/components/mod.rs	/^pub trait Drawable {$/;"	t
Drawable	src/manager/mod.rs	/^pub trait Drawable {$/;"	t
Drawable for BoxModel	src/manager/components/mod.rs	/^impl Drawable for BoxModel {$/;"	i
Drawable for DecisionBox	src/manager/components/decision_box.rs	/^impl Drawable for DecisionBox {$/;"	i
Drawable for DialogBox	src/manager/components/dialog_box.rs	/^impl Drawable for DialogBox {$/;"	i
Drawable for EntryBox	src/manager/components/entry_box.rs	/^impl Drawable for EntryBox {$/;"	i
Drawable for StateChangeBox	src/manager/components/state_change_box.rs	/^impl Drawable for StateChangeBox {$/;"	i
Drawable for VariableBox	src/manager/components/variable_box.rs	/^impl Drawable for VariableBox {$/;"	i
EntryBox	src/manager/components/entry_box.rs	/^pub struct EntryBox {$/;"	s
Eq for ComponentID	src/manager/mod.rs	/^impl Eq for ComponentID {}$/;"	i
EventManager	src/event/mod.rs	/^impl EventManager {$/;"	i
EventManager	src/event/mod.rs	/^pub struct EventManager {$/;"	s
EventManagerBuilder	src/event/mod.rs	/^impl EventManagerBuilder {$/;"	i
EventManagerBuilder	src/event/mod.rs	/^pub struct EventManagerBuilder {$/;"	s
GeneralMessage	src/event/message/mod.rs	/^pub enum GeneralMessage {$/;"	g
GuiManager	src/gui/manager.rs	/^impl GuiManager {$/;"	i
GuiManager	src/gui/manager.rs	/^pub struct GuiManager {$/;"	s
GuiManagerMessage	src/event/message/gui.rs	/^pub enum GuiManagerMessage {$/;"	g
GuiWidgetID	src/types.rs	/^pub struct GuiWidgetID(pub usize);$/;"	s
Header	src/gui/app.rs	/^impl Header {$/;"	i
Header	src/gui/app.rs	/^pub struct Header {$/;"	s
MAX_ZOOM_IN	src/render_window.rs	/^const MAX_ZOOM_IN  : i32 = 10;$/;"	c
MAX_ZOOM_OUT	src/render_window.rs	/^const MAX_ZOOM_OUT : i32 = -100;$/;"	c
Model	src/gui/app.rs	/^pub struct Model {$/;"	s
Model	src/manager/components/mod.rs	/^pub struct Model {$/;"	s
ModelID	src/manager/mod.rs	/^pub enum ModelID {$/;"	g
ModelManager	src/manager/mod.rs	/^impl ModelManager {$/;"	i
ModelManager	src/manager/mod.rs	/^pub struct ModelManager {$/;"	s
Mul for WorldUnit	src/types.rs	/^impl Mul for WorldUnit {$/;"	i
Ord for ComponentID	src/manager/mod.rs	/^impl Ord for ComponentID {$/;"	i
Output	src/types.rs	/^    type Output = WorldUnit;$/;"	T
PartialEq for ComponentID	src/manager/mod.rs	/^impl PartialEq for ComponentID {$/;"	i
PartialOrd for ComponentID	src/manager/mod.rs	/^impl PartialOrd for ComponentID {$/;"	i
RenderCoords	src/types.rs	/^pub struct RenderCoords(pub RenderX, pub RenderY);$/;"	s
RenderUnit	src/types.rs	/^pub struct RenderUnit(pub f64);$/;"	s
RenderWindow	src/render_window.rs	/^impl RenderWindow {$/;"	i
RenderWindow	src/render_window.rs	/^pub struct RenderWindow {$/;"	s
RenderX	src/render_window.rs	/^type RenderX = RenderUnit;$/;"	T
RenderX	src/types.rs	/^type RenderX = RenderUnit;$/;"	T
RenderY	src/render_window.rs	/^type RenderY = RenderUnit;$/;"	T
RenderY	src/types.rs	/^type RenderY = RenderUnit;$/;"	T
ScreenCoords	src/types.rs	/^pub struct ScreenCoords(pub ScreenX, pub ScreenY);$/;"	s
ScreenDimensions	src/types.rs	/^impl ScreenDimensions {$/;"	i
ScreenDimensions	src/types.rs	/^pub struct ScreenDimensions(pub ScreenWidth, pub ScreenHeight);$/;"	s
ScreenHeight	src/render_window.rs	/^type ScreenHeight = ScreenUnit;$/;"	T
ScreenHeight	src/types.rs	/^type ScreenHeight = ScreenUnit;$/;"	T
ScreenUnit	src/types.rs	/^pub struct ScreenUnit(pub f64);$/;"	s
ScreenWidth	src/render_window.rs	/^type ScreenWidth = ScreenUnit;$/;"	T
ScreenWidth	src/types.rs	/^type ScreenWidth = ScreenUnit;$/;"	T
ScreenX	src/render_window.rs	/^type ScreenX = ScreenUnit;$/;"	T
ScreenX	src/types.rs	/^type ScreenX = ScreenUnit;$/;"	T
ScreenY	src/render_window.rs	/^type ScreenY = ScreenUnit;$/;"	T
ScreenY	src/types.rs	/^type ScreenY = ScreenUnit;$/;"	T
ScrollDirection	src/types.rs	/^pub enum ScrollDirection {$/;"	g
StateChangeBox	src/manager/components/state_change_box.rs	/^pub struct StateChangeBox {$/;"	s
StyleScheme	src/style_scheme.rs	/^impl StyleScheme {$/;"	i
StyleScheme	src/style_scheme.rs	/^pub struct StyleScheme {$/;"	s
Sub for WorldUnit	src/types.rs	/^impl Sub for WorldUnit {$/;"	i
VariableBox	src/manager/components/variable_box.rs	/^pub struct VariableBox {$/;"	s
WorldBoundingBox	src/types.rs	/^impl WorldBoundingBox {$/;"	i
WorldBoundingBox	src/types.rs	/^pub struct WorldBoundingBox(pub WorldX, pub WorldY, pub WorldWidth, pub WorldHeight);$/;"	s
WorldCoords	src/types.rs	/^pub struct WorldCoords(pub WorldX, pub WorldY);$/;"	s
WorldHeight	src/render_window.rs	/^type WorldHeight = WorldUnit;$/;"	T
WorldHeight	src/types.rs	/^type WorldHeight = WorldUnit;$/;"	T
WorldUnit	src/types.rs	/^pub struct WorldUnit(pub f64);$/;"	s
WorldWidth	src/render_window.rs	/^type WorldWidth = WorldUnit;$/;"	T
WorldWidth	src/types.rs	/^type WorldWidth = WorldUnit;$/;"	T
WorldX	src/render_window.rs	/^type WorldX = WorldUnit;$/;"	T
WorldX	src/types.rs	/^type WorldX = WorldUnit;$/;"	T
WorldY	src/render_window.rs	/^type WorldY = WorldUnit;$/;"	T
WorldY	src/types.rs	/^type WorldY = WorldUnit;$/;"	T
add	src/types.rs	/^    fn add(self, other : WorldUnit) -> WorldUnit {$/;"	f
app	src/gui/mod.rs	/^pub mod app;$/;"	m
app.rs	src/gui/app.rs	1;"	F
as_ref	src/gui/app.rs	/^    fn as_ref(&self) -> &Box {$/;"	f
as_ref	src/gui/app.rs	/^    fn as_ref(&self) -> &Window {$/;"	f
as_ref	src/renderer/dialog/mod.rs	/^    fn as_ref(&self) -> &DrawingArea {$/;"	f
build	src/event/mod.rs	/^   pub fn build(self) -> EventManager {$/;"	f
check_intersect	src/types.rs	/^    pub fn check_intersect(boxa : &WorldBoundingBox, boxb : &WorldBoundingBox) -> bool {$/;"	f
check_intersect_corner	src/render_window.rs	/^    pub fn check_intersect_corner() {$/;"	f
check_intersect_edge	src/render_window.rs	/^    pub fn check_intersect_edge() {$/;"	f
check_intersect_inside	src/render_window.rs	/^    pub fn check_intersect_inside() {$/;"	f
check_intersect_intersect	src/render_window.rs	/^    pub fn check_intersect_intersect() {$/;"	f
check_intersect_outside	src/render_window.rs	/^    pub fn check_intersect_outside() {$/;"	f
cmp	src/manager/mod.rs	/^    fn cmp(&self, other: &ComponentID) -> Ordering {$/;"	f
components	src/manager/mod.rs	/^pub mod components;$/;"	m
decision_box	src/manager/components/mod.rs	/^mod decision_box;$/;"	m
decision_box.rs	src/manager/components/decision_box.rs	1;"	F
dialog	src/input/mod.rs	/^pub mod dialog;$/;"	m
dialog	src/renderer/mod.rs	/^pub mod dialog;$/;"	m
dialog.rs	src/input/dialog.rs	1;"	F
dialog_box	src/manager/components/mod.rs	/^mod dialog_box;$/;"	m
dialog_box.rs	src/manager/components/dialog_box.rs	1;"	F
draw	src/manager/components/decision_box.rs	/^    fn draw(&self, cr : &Context, style: &StyleScheme, window : &RenderWindow) {$/;"	f
draw	src/manager/components/dialog_box.rs	/^    fn draw(&self, cr : &Context, style: &StyleScheme, window : &RenderWindow) {$/;"	f
draw	src/manager/components/entry_box.rs	/^    fn draw(&self, cr : &Context, style: &StyleScheme, window : &RenderWindow) {$/;"	f
draw	src/manager/components/mod.rs	/^    fn draw(&self, cr : &Context, style: &StyleScheme, window : &RenderWindow) {$/;"	f
draw	src/manager/components/mod.rs	/^    fn draw(&self, cr : &Context, style: &StyleScheme, window : &RenderWindow);$/;"	f
draw	src/manager/components/state_change_box.rs	/^    fn draw(&self, cr : &Context, style: &StyleScheme, window : &RenderWindow) {$/;"	f
draw	src/manager/components/variable_box.rs	/^    fn draw(&self, cr : &Context, style: &StyleScheme, window : &RenderWindow) {$/;"	f
draw	src/manager/mod.rs	/^    fn draw(&self, cr : &Context, style: &StyleScheme, window : &RenderWindow);$/;"	f
entry_box	src/manager/components/mod.rs	/^mod entry_box;$/;"	m
entry_box.rs	src/manager/components/entry_box.rs	1;"	F
eq	src/manager/mod.rs	/^    fn eq(&self, other : &ComponentID) -> bool {$/;"	f
event	src/main.rs	/^mod event;$/;"	m
from	src/style_scheme.rs	/^    pub fn from(context: &StyleContext) -> StyleScheme {$/;"	f
get_bounding_box	src/manager/components/dialog_box.rs	/^    pub fn get_bounding_box(&self) -> &WorldBoundingBox {$/;"	f
get_channel	src/gui/manager.rs	/^    pub fn get_channel(&self) -> Sender<GuiManagerMessage> {$/;"	f
get_gdk_channel	src/event/mod.rs	/^   pub fn get_gdk_channel(&mut self) -> Sender<GeneralMessage> {$/;"	f
gui	src/event/message/mod.rs	/^pub mod gui;$/;"	m
gui	src/main.rs	/^mod gui;$/;"	m
gui.rs	src/event/message/gui.rs	1;"	F
handle_message	src/input/dialog.rs	/^   pub fn handle_message(&mut self, message: GeneralMessage) -> Option<DialogRendererMessage> {$/;"	f
init	src/gui/mod.rs	/^pub fn init() {$/;"	f
input	src/main.rs	/^mod input;$/;"	m
is_bounding_box_onscreen	src/render_window.rs	/^    pub fn is_bounding_box_onscreen(&self, bounding_box: &WorldBoundingBox) -> bool {$/;"	f
is_point_onscreen	src/render_window.rs	/^    pub fn is_point_onscreen(&self, world_coords: &WorldCoords) -> bool {$/;"	f
main	src/main.rs	/^fn main() {$/;"	f
main.rs	src/main.rs	1;"	F
manager	src/gui/mod.rs	/^pub mod manager;$/;"	m
manager	src/main.rs	/^mod manager;$/;"	m
manager.rs	src/gui/manager.rs	1;"	F
message	src/event/mod.rs	/^pub mod message;$/;"	m
mod.rs	src/event/message/mod.rs	1;"	F
mod.rs	src/event/mod.rs	1;"	F
mod.rs	src/gui/mod.rs	1;"	F
mod.rs	src/input/mod.rs	1;"	F
mod.rs	src/manager/components/mod.rs	1;"	F
mod.rs	src/manager/mod.rs	1;"	F
mod.rs	src/renderer/dialog/mod.rs	1;"	F
mod.rs	src/renderer/mod.rs	1;"	F
move_box	src/types.rs	/^    pub fn move_box(&mut self, dx : WorldUnit, dy : WorldUnit) {$/;"	f
move_box_works	src/render_window.rs	/^    pub fn move_box_works() {$/;"	f
mul	src/types.rs	/^    fn mul(self, other : WorldUnit) -> WorldUnit {$/;"	f
new	src/event/mod.rs	/^        pub fn new() -> EventManagerBuilder {$/;"	f
new	src/event/mod.rs	/^   pub fn new() -> Self {$/;"	f
new	src/gui/app.rs	/^    fn new((event_builder, gui_manager): (&mut EventManagerBuilder, &mut GuiManager), style_context: Arc<RwLock<StyleScheme>>) -> Self {$/;"	f
new	src/gui/app.rs	/^    fn new() -> Header {$/;"	f
new	src/gui/app.rs	/^    pub fn new((event_builder, gui_manager): (&mut EventManagerBuilder, &mut GuiManager)) -> App {$/;"	f
new	src/gui/manager.rs	/^    pub fn new(event_manager: &mut EventManagerBuilder) -> Self {$/;"	f
new	src/input/dialog.rs	/^    pub fn new() -> Self  {$/;"	f
new	src/manager/components/dialog_box.rs	/^    pub fn new() -> Self {$/;"	f
new	src/render_window.rs	/^    pub fn new(screen_width: ScreenUnit, screen_height: ScreenUnit) -> RenderWindow {$/;"	f
new	src/renderer/dialog/mod.rs	/^    pub fn new((event_builder, gui_manager): (&mut EventManagerBuilder, &mut GuiManager), style_scheme: Arc<RwLock<StyleScheme>>) -> DialogRenderer {$/;"	f
partial_cmp	src/manager/mod.rs	/^    fn partial_cmp(&self, other: &ComponentID) -> Option<Ordering> {$/;"	f
point_within_bounds	src/types.rs	/^    pub fn point_within_bounds(&self, point : &WorldCoords) -> bool {$/;"	f
point_within_bounds_inside	src/render_window.rs	/^    pub fn point_within_bounds_inside() {$/;"	f
point_within_bounds_outside	src/render_window.rs	/^    pub fn point_within_bounds_outside() {$/;"	f
register_widget	src/gui/manager.rs	/^    pub fn register_widget<T>(&mut self, widget: T) -> GuiWidgetID$/;"	f
render_window	src/main.rs	/^mod render_window;$/;"	m
render_window.rs	src/render_window.rs	1;"	F
renderer	src/event/message/mod.rs	/^pub mod renderer;$/;"	m
renderer	src/main.rs	/^mod renderer;$/;"	m
renderer.rs	src/event/message/renderer.rs	1;"	F
run	src/gui/app.rs	/^    pub fn run(&self) {$/;"	f
run_iteration	src/gui/manager.rs	/^    pub fn run_iteration(&mut self) {$/;"	f
scale_box	src/types.rs	/^    pub fn scale_box(&mut self, sx : WorldUnit, sy : WorldUnit) {$/;"	f
scale_box_around_center	src/types.rs	/^    pub fn scale_box_around_center(&mut self, sx : WorldUnit, sy: WorldUnit) {$/;"	f
scale_box_around_center_works	src/render_window.rs	/^    pub fn scale_box_around_center_works() {$/;"	f
scale_box_around_point	src/types.rs	/^    pub fn scale_box_around_point(&mut self, sx : WorldUnit, sy: WorldUnit, point : &WorldCoords) {$/;"	f
scale_box_around_point_center_works	src/render_window.rs	/^    pub fn scale_box_around_point_center_works() {$/;"	f
scale_box_around_point_corner_works	src/render_window.rs	/^    pub fn scale_box_around_point_corner_works() {$/;"	f
scale_box_checks	src/render_window.rs	/^    pub fn scale_box_checks() {$/;"	f
scale_box_works	src/render_window.rs	/^    pub fn scale_box_works() {$/;"	f
screen_dimensions	src/render_window.rs	/^    pub fn screen_dimensions(&self) -> &ScreenDimensions {$/;"	f
screen_to_render	src/render_window.rs	/^    pub fn screen_to_render(&self, screen_coords: &ScreenCoords) -> RenderCoords {$/;"	f
screen_to_render_x	src/render_window.rs	/^    pub fn screen_to_render_x(&self, coord_x: ScreenUnit) -> RenderUnit {$/;"	f
screen_to_render_y	src/render_window.rs	/^    pub fn screen_to_render_y(&self, coord_y: ScreenUnit) -> RenderUnit {$/;"	f
screen_to_world	src/render_window.rs	/^    pub fn screen_to_world(&self, screen_coords: &ScreenCoords) -> WorldCoords {$/;"	f
screen_to_world_x	src/render_window.rs	/^    pub fn screen_to_world_x(&self, coord_x: ScreenUnit) -> WorldUnit {$/;"	f
screen_to_world_y	src/render_window.rs	/^    pub fn screen_to_world_y(&self, coord_y: ScreenUnit) -> WorldUnit {$/;"	f
set_box	src/types.rs	/^    pub fn set_box(&mut self, point : WorldCoords, width: WorldWidth, height: WorldHeight) {$/;"	f
set_box_between	src/types.rs	/^    pub fn set_box_between(&mut self, point_a : WorldCoords, point_b : WorldCoords) {$/;"	f
set_box_between_order_irrelevant	src/render_window.rs	/^    pub fn set_box_between_order_irrelevant() {$/;"	f
set_box_between_works	src/render_window.rs	/^    pub fn set_box_between_works() {$/;"	f
set_box_works	src/render_window.rs	/^    pub fn set_box_works() {$/;"	f
set_dimensions	src/types.rs	/^    pub fn set_dimensions(&mut self, width : ScreenWidth, height: ScreenHeight) {$/;"	f
set_dimensions	src/types.rs	/^    pub fn set_dimensions(&mut self, width : WorldWidth, height: WorldHeight) {$/;"	f
set_gui_channel	src/event/mod.rs	/^   pub fn set_gui_channel(&mut self, gui_channel: Sender<message::gui::GuiManagerMessage>) -> &mut Self {$/;"	f
set_height	src/types.rs	/^    pub fn set_height(&mut self, height : ScreenHeight) {$/;"	f
set_height	src/types.rs	/^    pub fn set_height(&mut self, height : WorldHeight) {$/;"	f
set_renderer_channel	src/event/mod.rs	/^   pub fn set_renderer_channel(&mut self, renderer_channel : Sender<message::renderer::DialogRendererMessage>) -> &mut Self {$/;"	f
set_width	src/types.rs	/^    pub fn set_width(&mut self, width : ScreenWidth) {$/;"	f
set_width	src/types.rs	/^    pub fn set_width(&mut self, width : WorldWidth) {$/;"	f
start	src/event/mod.rs	/^        pub fn start(event_manager: EventManager) {$/;"	f
state	src/main.rs	/^mod state;$/;"	m
state.rs	src/state.rs	1;"	F
state_change_box	src/manager/components/mod.rs	/^mod state_change_box;$/;"	m
state_change_box.rs	src/manager/components/state_change_box.rs	1;"	F
style_scheme	src/main.rs	/^mod style_scheme;$/;"	m
style_scheme.rs	src/style_scheme.rs	1;"	F
sub	src/types.rs	/^    fn sub(self, other : WorldUnit) -> WorldUnit {$/;"	f
test	src/render_window.rs	/^mod test {$/;"	m
types	src/main.rs	/^mod types;$/;"	m
types.rs	src/types.rs	1;"	F
update_screen_dimensions	src/render_window.rs	/^    pub fn update_screen_dimensions(&mut self, screen_dimensions: ScreenDimensions) {$/;"	f
update_screen_dimensions_simple_works	src/render_window.rs	/^    pub fn update_screen_dimensions_simple_works() {$/;"	f
update_screen_dimensions_works	src/render_window.rs	/^    pub fn update_screen_dimensions_works() {$/;"	f
variable_box	src/manager/components/mod.rs	/^mod variable_box;$/;"	m
variable_box.rs	src/manager/components/variable_box.rs	1;"	F
world_bounding_box	src/render_window.rs	/^    pub fn world_bounding_box(&self) -> &WorldBoundingBox {$/;"	f
world_to_render	src/render_window.rs	/^    pub fn world_to_render(&self, world_coords: &WorldCoords) -> RenderCoords {$/;"	f
world_to_render_x	src/render_window.rs	/^    pub fn world_to_render_x(&self, coord_x: WorldUnit) -> RenderUnit {$/;"	f
world_to_render_y	src/render_window.rs	/^    pub fn world_to_render_y(&self, coord_y: WorldUnit) -> RenderUnit {$/;"	f
world_to_screen	src/render_window.rs	/^    pub fn world_to_screen(&self, world_coords: &WorldCoords) -> ScreenCoords {$/;"	f
world_to_screen_x	src/render_window.rs	/^    pub fn world_to_screen_x(&self, coord_x: WorldUnit) -> ScreenUnit {$/;"	f
world_to_screen_y	src/render_window.rs	/^    pub fn world_to_screen_y(&self, coord_y: WorldUnit) -> ScreenUnit {$/;"	f
zoom_window	src/render_window.rs	/^    pub fn zoom_window(&mut self, center: &ScreenCoords, direction: ScrollDirection, mut delta: f64) {$/;"	f
